Metadata: 
  License: MIT License
AWSTemplateFormatVersion: 2010-09-09
Description: "This template is used to build an reference AWS architecture based on the Walled-Garden Approach that only allows outbound traffic to domains that you explicitly allow."
Parameters:
  InstanceAMIParameter:
    Type: AWS::EC2::Image::Id
    Default: ami-0f36dcfcc94112ea1
    Description: Enter AMI Image ID.

  DNSFirewallAllowDomain:
    Type: List<String>
    Default: "*.amazonaws.com,*.google.com"
    Description: Enter Domain Names to Allow by DNS Firewall.

  NetworkFirewallAllowDomain:
    Type: List<String>
    Default: ".google.com"
    Description: Enter Domain Names to Allow by Network Firewall.

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'

  # Subnet
  PublicFirewallSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.20.0/24
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region

  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region

  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.10.0/24
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region

  # Internet Gateway
  IGW:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}

  VPCGWAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  # NAT Gateway
  NatGW:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      SubnetId: !Ref PublicSubnet
      AllocationId: !GetAtt NatGWEIP.AllocationId

  NatGWEIP:
    Type: 'AWS::EC2::EIP'
    Properties: {}

  # EC2 Instance
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      ImageId: !Ref InstanceAMIParameter
      IamInstanceProfile: !Ref InstanceProfile

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref SSMRole

  SSMRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"

  # VPC Endpoint
  SSMInterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssm'
      VpcId: !Ref VPC
      SubnetIds: 
        - !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: True

  EC2MessageInterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2messages'
      VpcId: !Ref VPC
      SubnetIds: 
        - !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: True

  SSMMessagesInterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssmmessages'
      VpcId: !Ref VPC
      SubnetIds: 
        - !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: True

  S3GatewayEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject'
            Resource:
              - 'arn:aws:s3:::amazonlinux.ap-northeast-1.amazonaws.com/*'
              - 'arn:aws:s3:::amazonlinux-2-repos-ap-northeast-1/*'
      RouteTableIds:
        - !Ref PrivateRouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref VPC

  # DNS Firewall
  DNSFWExampleDomainsList:
    Type: AWS::Route53Resolver::FirewallDomainList
    Properties: 
      Domains: !Ref DNSFirewallAllowDomain
      #  - '*.amazonaws.com'
      #  - '*.google.com'
      Name: ExampleDomains

  DNSFWAllDomainsList:
    Type: AWS::Route53Resolver::FirewallDomainList
    Properties: 
      Domains: 
        - '*'
      Name: AllDomains

  DNSFWRuleGroup:
    Type: AWS::Route53Resolver::FirewallRuleGroup
    Properties:
      FirewallRules:
        -
          Action: ALLOW
          FirewallDomainListId: !Ref DNSFWExampleDomainsList
          Priority: 1
        -
          Action: BLOCK
          BlockResponse: NODATA
          FirewallDomainListId: !Ref DNSFWAllDomainsList
          Priority: 2

  DNSFWRuleGroupAssociation:
    Type: AWS::Route53Resolver::FirewallRuleGroupAssociation
    Properties: 
      FirewallRuleGroupId: !Ref DNSFWRuleGroup
      Name: 'DNSFWRuleGroupAssociation'
      Priority: 101
      VpcId: !Ref VPC

  # NW Firewall
  NWFirewall:
    Type: AWS::NetworkFirewall::Firewall
    Properties:
      FirewallName: NWFirewall
      FirewallPolicyArn: !Ref FirewallPolicy
      VpcId: !Ref VPC
      SubnetMappings:
        - SubnetId: !Ref PublicFirewallSubnet

  FirewallPolicy:
    Type: 'AWS::NetworkFirewall::FirewallPolicy'
    Properties:
      FirewallPolicyName: FirewallPolicy
      FirewallPolicy:
        StatelessDefaultActions:
          - 'aws:forward_to_sfe'
        StatelessFragmentDefaultActions:
          - 'aws:drop'
        StatefulRuleGroupReferences:
          - ResourceArn: !Ref StatefulRuleGroup

  StatefulRuleGroup:
    Type: 'AWS::NetworkFirewall::RuleGroup'
    Properties:
      Capacity: 100
      RuleGroupName: StatefulRuleGroup
      Type: STATEFUL
      RuleGroup:
        RulesSource:
          RulesSourceList:
            Targets: !Ref NetworkFirewallAllowDomain
              #- '.google.com'
            GeneratedRulesType: 'ALLOWLIST'
            TargetTypes: 
              - 'TLS_SNI'
              - 'HTTP_HOST'

  # Security Group
  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: JAWS Days2022
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  VPCEndpointSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: JAWS Days2022

  VPCEndpointSecurityGroupInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId:
        Fn::GetAtt:
          - EC2SecurityGroup
          - GroupId
      GroupId:
        Fn::GetAtt:
          - VPCEndpointSecurityGroup
          - GroupId  

  # Route Table
  PublicFWRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC

  PublicFWRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicFWRouteTable
      GatewayId: !Ref IGW
      DestinationCidrBlock: 0.0.0.0/0

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      VpcEndpointId: !Select [ "1" , !Split [ ":" , !Select [ "0", !GetAtt NWFirewall.EndpointIds ] ] ]
      DestinationCidrBlock: 0.0.0.0/0

  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC

  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      NatGatewayId: !Ref NatGW
      DestinationCidrBlock: 0.0.0.0/0

  PublicFWRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicFirewallSubnet
      RouteTableId:
        Ref: PublicFWRouteTable

  PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet
      RouteTableId:
        Ref: PublicRouteTable
        
  PrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet
      RouteTableId:
        Ref: PrivateRouteTable

  IngressRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC

  IngressRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      VpcEndpointId: !Select [ "1" , !Split [ ":" , !Select [ "0", !GetAtt NWFirewall.EndpointIds ] ] ]
      DestinationCidrBlock: 10.0.0.0/24
      RouteTableId: !Ref IngressRouteTable

  IngressRouteEdgeAssociation:
    Type: AWS::EC2::GatewayRouteTableAssociation
    Properties: 
      GatewayId: !Ref IGW
      RouteTableId: !Ref IngressRouteTable

  # Network ACL
  PublicNACL:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC

  PrivateNACL:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC

  PublicSubnetNACLAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      NetworkAclId: !Ref PublicNACL

  PrivateSubnetNACLAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet
      NetworkAclId: !Ref PrivateNACL

  PublicNACLInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: PublicNACL
       RuleNumber: 100
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 1024
         To: 65535

  PublicNACLInboundRuleHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: PublicNACL
       RuleNumber: 101
       Protocol: 6
       RuleAction: allow
       CidrBlock: 10.0.10.0/24
       PortRange:
         From: 80
         To: 80

  PublicNACLInboundRuleHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: PublicNACL
       RuleNumber: 102
       Protocol: 6
       RuleAction: allow
       CidrBlock: 10.0.10.0/24
       PortRange:
         From: 443
         To: 443

  PublicNACLOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: PublicNACL
       RuleNumber: 100
       Protocol: 6
       Egress: true
       RuleAction: allow
       CidrBlock: 10.0.10.0/24
       PortRange:
         From: 1024
         To: 65535

  PublicNACLOutboundRuleHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: PublicNACL
       RuleNumber: 101
       Protocol: 6
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 80
         To: 80

  PublicNACLOutboundRuleHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: PublicNACL
       RuleNumber: 102
       Protocol: 6
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 443
         To: 443

  PrivateNACLInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: PrivateNACL
       RuleNumber: 100
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 1024
         To: 65535

  PrivateNACLOutboundRuleHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: PrivateNACL
       RuleNumber: 100
       Protocol: 6
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 80
         To: 80

  PrivateNACLOutboundRuleHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: PrivateNACL
       RuleNumber: 101
       Protocol: 6
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 443
         To: 443
